<Graph ClassName="MailchimpContactMaint" Source="#CDATA" IsNew="True" FileType="ExistingGraph">
    <CDATA name="Source"><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Runtime.CompilerServices;
using PX.Common;
using PX.Data;
using PX.Objects.AR;
using PX.Objects.CR.MassProcess;
using PX.Objects.GL;
using PX.Objects.CS;
using PX.Objects.EP;
using PX.SM;
using PX.Objects;
using PX.Objects.CR;
using MailchimpPXLib;
using MC = MailChimp.Net.Models;

namespace Mailchimp
{
  public class ContactMaint_Extension : PXGraphExtension<ContactMaint>
  {

        public PXSelect<CRSetup> Setup;

        public override void Initialize()
        {
            // Sort by StartDate (default is CreatedDateTime) so Mailchimp Activities are in sequence with pre-existing Acumatica Activites
            Base.Activities.OrderByNew<OrderBy<Desc<CRActivity.startDate>>>(); 
        }


        // Given a Contact maintenance page, return a Mailchimp manager
        public MailchimpPXManager GetManager()
        {
            CRSetup setup = Base.Setup.Current;
            CRSetupExt setupExt = setup.GetExtension<CRSetupExt>();

            var apiKey = setupExt.UsrMailchimpAPIKey;
            return new MailchimpPXManager(apiKey);
        }

        #region GetMailchimpData
        public PXAction<Contact> actionGetMailchimpData;
        [PXProcessButton]
        [PXUIField(DisplayName = "Get Mailchimp Data")]
        protected virtual IEnumerable ActionGetMailchimpData(PXAdapter adapter)
        {
            foreach (Contact contact in adapter.Get())
            {
                this.Base.Actions.PressSave();

                PXLongOperation.StartOperation(Base, delegate ()
                {
                    ContactMaint graph = PXGraph.CreateInstance<ContactMaint>();
                    ContactMaint_Extension graphExt = graph.GetExtension<ContactMaint_Extension>();
                    graphExt.GetMailchimpData(contact);
                });

                yield return contact;
            }
        }

        public void GetMailchimpData(Contact contact, string listID = "")
        {
            Base.ContactCurrent.Current = contact;
            if (contact == null) return;

            ContactExt ext = contact.GetExtension<ContactExt>();
            var manager = GetManager();

            MC.Member member = GetMemberOnList(manager, contact, ext, listID);
            if (member != null)
            {
                SetMailchimpStats(ext, member);
                GetContactActivities(manager, ext, member.ListId);
            }

            Base.ContactCurrent.Update(contact);
            Base.Save.Press();
        }
        #endregion


        public MC.Member GetMemberOnList(MailchimpPXManager manager, Contact contact, ContactExt ext, string listID)
        {
            MC.Member member = null;
            bool onList = false;

            if (!String.IsNullOrEmpty(listID)) // Just check membership on a single list
            {
                member = manager.GetMember(listID, contact.EMail);
                ext.UsrMailchimpListID = listID;

            } else { // check all lists for membership

                // pulling from all lists that Mailchimp returns
                foreach (var mailchimpList in manager.GetLists())
                {
                    // see if the contact is on that list
                    // if yes: save list on contact, then break (don't worry about checking the other lists if you've already found a match)
                    try
                    {
                        member = manager.GetMember(mailchimpList.Id, contact.EMail);
                        ext.UsrMailchimpListID = mailchimpList.Id;
                        onList = true;
                        break;
                    }
                    catch (MemberDoesNotExistException)
                    {
                        // if the user doesn't exist on this MC list, don't throw an exception yet. Continue to try the next list and only throw exception if not on any list. 
                    }
                }

                // If not any list, return a message to the user
                if (onList == false)
                {
                    throw new MemberDoesNotExistException();
                }

            }

            return member;
        }


        public void SetMailchimpStats(ContactExt ext, MC.Member member)
        {
            ext.UsrMailchimpListStatus = member.Status.ToString();
            ext.UsrMailchimpMemberLastChanged = String.IsNullOrEmpty(member.LastChanged) ? (DateTime?)null : DateTime.ParseExact(member.LastChanged, "yyyy-MM-ddTHH:mm:sszzzz", CultureInfo.InvariantCulture);
            ext.UsrMailchimpAverageClickRate = Convert.ToDecimal(member.Stats.AverageClickRate * 100); // multiply by 100 because it's a percentage
            ext.UsrMailchimpAverageOpenRate = Convert.ToDecimal(member.Stats.AverageOpenRate * 100); // multiple by 100 because it's a percentage
            //ext.UsrMailchimpSubscriberSource = String.IsNullOrEmpty(member.Source) ? "" : string.Join("", member.Source.Take(100)); // truncate to 100 characters because that's how long the MC db field is
            // TODO - Source is available according to the reference documentation but for some reason isn't in the Member DAC - how can we add it?
            ext.UsrMailchimpUnsubscribeReason = String.IsNullOrEmpty(member.UnsubscribeReason) ? "" : string.Join("", member.UnsubscribeReason.Take(100)); // truncate to 100 characters because that's how long the MC db field is
            ext.UsrMailchimpTimestampOpt = String.IsNullOrEmpty(member.TimestampOpt) ? (DateTime?)null : DateTime.ParseExact(member.TimestampOpt, "yyyy-MM-ddTHH:mm:sszzzz", CultureInfo.InvariantCulture);
            ext.UsrMailchimpTimestampSignup = String.IsNullOrEmpty(member.TimestampSignup) ? (DateTime?)null : DateTime.ParseExact(member.TimestampSignup, "yyyy-MM-ddTHH:mm:sszzzz", CultureInfo.InvariantCulture);
        }


        public void GetContactActivities(MailchimpPXManager manager, ContactExt ext, string listID)
        {
            EPActivityType mCActivityType = GetOrCreateMailchimpActivityType();

            // This code works but doesn't do us any good because the API can't handle dates 
            // 1. Figure out the date of the most recent MC activity in Acumatica for this contact
            /* IEnumerable<CRPMTimeActivity> mCActivitesInAcumatica = Base.Activities.Select().RowCast<CRPMTimeActivity>()
                 .Where(ac => ac.Type == mCActivityType.Type)
                 .OrderBy(ac => ac.StartDate); // for mailchimp activities, the start date is pulled from the mailchimp timestamp
            DateTime? mostRecentMCDateInAC = mCActivitesInAcumatica.Last().StartDate; */
            // 2. Pull any activities from MC that are since that date (or pull them all and only insert them if they are since that date?)

            //CRMailchimpList list = PXSelect<CRMailchimpList,
              //  Where<CRMailchimpList.listID, Equal<Required<CRMailchimpList.listID>>>>.Select(Base, ext.UsrMailchimpListID);

            // TODO - looks like the API might limit to 50 activities. Do we need to test that? are we worried about that?

            var activities = manager.GetActivities(listID, Base.Contact.Current.EMail);
            if (activities != null)
            {
                RegisterActivities(activities.ToList(), mCActivityType);
            }
        }

        #region UpdateListMembership
        public PXAction<Contact> actionListMembership;
        [PXProcessButton]
        [PXUIField(DisplayName = "Get List Membership")]
        protected virtual IEnumerable ActionListMembership(PXAdapter adapter)
        {
            foreach (Contact contact in adapter.Get())
            {
                this.Base.Actions.PressSave();

                PXLongOperation.StartOperation(Base, delegate ()
                {
                    ContactMaint graph = PXGraph.CreateInstance<ContactMaint>();
                    ContactMaint_Extension graphExt = graph.GetExtension<ContactMaint_Extension>();
                    graphExt.GetListMembership(contact);
                });

                yield return contact;
            }
        }

        // Check mailchimp to see if the contact is on a list and if so, update their MC list in Acumatica
        public MC.Member GetListMembership(Contact contact, string listID = "")
        {
            Base.ContactCurrent.Current = contact;
            if (contact == null) return null;
            ContactExt ext = contact.GetExtension<ContactExt>();

            var manager = GetManager();
            MC.Member member = GetMemberOnList(manager, contact, ext, listID);           

            Base.ContactCurrent.Update(contact);
            Base.Save.Press();

            return member;
        }
        #endregion

        #region UpdateSubscriptionStatus 
        public void UpdateMailchimpStatus(Contact contact, string listID = "")
        {
            Base.ContactCurrent.Current = contact;
            if (contact == null) return;

            ContactExt ext = contact.GetExtension<ContactExt>();
            var manager = GetManager();

            MC.Member member = GetMemberOnList(manager, contact, ext, listID);

            if (member != null)
                SetMailchimpStats(ext, member);

            Base.ContactCurrent.Update(contact);
            Base.Save.Press();
        }
 
        public PXAction<Contact> syncMailchimpStatus;
        [PXProcessButton]
        [PXUIField(DisplayName = "Sync Mailchimp")]
        protected virtual IEnumerable SyncMailchimpStatus(PXAdapter adapter)
        {
            foreach (Contact contact in adapter.Get())
            {
                this.Base.Actions.PressSave();

                PXLongOperation.StartOperation(Base, delegate ()
                {
                    ContactMaint graph = PXGraph.CreateInstance<ContactMaint>();
                    ContactMaint_Extension graphExt = graph.GetExtension<ContactMaint_Extension>();
                    graphExt.UpdateMailchimpStatus(contact);
                });

                yield return contact;
            }
        }
        #endregion

        #region Get Mailchimp Activities


        List<MC.Activity> activityList = new List<MC.Activity>();

        public void UpdateMailchimpActivities(Contact contact, string listID = "")
        {

            Base.ContactCurrent.Current = contact;
            if (contact == null) return;

            ContactExt ext = contact.GetExtension<ContactExt>();
            var manager = GetManager();

            MC.Member member = GetMemberOnList(manager, contact, ext, listID);

            if (member != null)
                GetContactActivities(manager, ext, member.ListId);

            Base.ContactCurrent.Update(contact);
            Base.Save.Press();
        }

        public PXAction<Contact> syncMailchimpActivities;
        [PXButton(CommitChanges = true)]
        [PXUIField(DisplayName = "Sync MC Activities")]
        protected virtual IEnumerable SyncMailchimpActivities(PXAdapter adapter)
        {
            foreach (Contact contact in adapter.Get())
            {
                this.Base.Actions.PressSave();

                PXLongOperation.StartOperation(Base, delegate ()
                {
                    ContactMaint graph = PXGraph.CreateInstance<ContactMaint>();
                    ContactMaint_Extension graphExt = graph.GetExtension<ContactMaint_Extension>();
                    graphExt.UpdateMailchimpActivities(contact);
                });

                yield return contact;
            }
        }

        private EPActivityType GetOrCreateMailchimpActivityType()
        {
            EPActivityType mailChimpActivityType = new EPActivityType();
            CRActivitySetupMaint graph = PXGraph.CreateInstance<CRActivitySetupMaint>();

            EPActivityType existingType = PXSelect<EPActivityType,
                Where<EPActivityType.type, Equal <Required<EPActivityType.type>>>>.Select(Base, MailchimpActivityType.MC);

            if (existingType != null)
            {
                mailChimpActivityType = existingType; 
            }
            else
            {
                mailChimpActivityType.Type = MailchimpActivityType.MC;
                mailChimpActivityType.Description = "Mailchimp";
                mailChimpActivityType.Active = true;
                mailChimpActivityType.ImageUrl = "main@Activity";
                mailChimpActivityType.Incoming = true;
                mailChimpActivityType.Outgoing = true;
                mailChimpActivityType.IsInternal = false; // With IsInternal marked as false, will not be an option under the Add Activities menu of the Activities tab

                graph.ActivityTypes.Insert(mailChimpActivityType);
                graph.Actions.PressSave();
            }

            return mailChimpActivityType;
        }

        // Check to see if the Mailchimp activity already exists
        public bool ActivityExists(MC.Activity activity)
        {
            EPActivityType mCActivityType = GetOrCreateMailchimpActivityType();

            TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
            string titleCasedAction = textInfo.ToTitleCase(activity.Action.ToLower());

            foreach (CRActivity acumaticaActivity in Base.Activities.Select()) 
            {
                CRActivityExt acumaticaActivityExt = acumaticaActivity.GetExtension<CRActivityExt>();

                // If it's a MailChimp type activity and the timestamp and action match, assume it's the same activity and has already been pulled into Acumatica
                if (acumaticaActivity.Type == mCActivityType.Type && activity.Timestamp == acumaticaActivityExt.UsrMailchimpTimestamp && titleCasedAction == acumaticaActivityExt.UsrMailchimpAction)
                    return true; // activity already exists in Acumatica
            }
            
            return false; // activity doesn't exist in Acumatica
        }

        public void RegisterActivities(List<MC.Activity> result, EPActivityType activityType)
        {
            bool isInserted = false;
            CRActivityMaint graph = PXGraph.CreateInstance<CRActivityMaint>();

            // Insert activities in order from earliest to latest so that more recent activities are shown at the top of the Activities tab for the contact
            result = result.OrderBy(n => n.Timestamp).ToList();

            foreach (MC.Activity activity in result)
            {
                /* if ( !(activity.Action == "Ubsub") && !ActivityExists(activity)) // Make sure it hasn't already been pulled into Acumatica
                                                                                 // Exclude unsubscribe from the activities list since unsubscribes show up but subscribes don't
                                                                                 // Also, if someone ubsubscribes and then resubscribes, the resubscribe doesn't show as an activity, so it's confusing
                                                                                 // Moreover, ifthey unsubscribe a second time, the first ubsubscribe is no longer in the activity stream, which is also confusing 
                                                                                 // We decided this is rare enough that we'll just go ahead and pull unsubscribes in, even if it's a little confusing sometimes
                                                                                 */
                if (!ActivityExists(activity)) // Make sure it hasn't already been pulled into Acumatica
                {
                    //Insert Activity to Acumatica
                    CRActivity cRActivity = new CRActivity();
                    CRActivityExt ext = PXCache<CRActivity>.GetExtension<CRActivityExt>(cRActivity);

                    TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
                    DateTime parsedDateTime = DateTime.ParseExact(activity.Timestamp, "yyyy-MM-ddTHH:mm:sszzzz", CultureInfo.InvariantCulture);

                    cRActivity.Type = activityType.Type;
                    cRActivity.Subject = CreateActivitySubject(activity.Action, activity.Title);  
                    cRActivity.ContactID = Base.Contact.Current.ContactID;
                    cRActivity.BAccountID = Base.Contact.Current.BAccountID;
                    cRActivity.StartDate = parsedDateTime;
                    cRActivity.RefNoteID = Base.Contact.Current.NoteID;

                    ext.UsrMailchimpAction = textInfo.ToTitleCase(activity.Action.ToLower());
                    ext.UsrMailchimpCampaignID = activity.CampaignId;
                    ext.UsrMailchimpTimestamp = activity.Timestamp;
                    //ext.UsrMailchimpClickURL = activity.Url; // TODO - URL is not currently being returned from Mailchimp. To get it, we would need to extend the package

                    cRActivity = graph.Activities.Insert(cRActivity);
                    isInserted = true;

                }
            }
            if (isInserted)
                graph.Actions.PressSave();
        }

        private string CreateActivitySubject(string action, string title) 
        {
            action = mailChimpActionDict.ContainsKey(action) ? mailChimpActionDict[action] : action;
            string subject = action + title;

            return subject;
        }

        private readonly Dictionary<string, string> mailChimpActionDict = new Dictionary<string, string>()
        {
            {"sent", "Was Sent the email " },
            {"open", "Opened the email " },
            {"click", "Clicked on a link from the email " },
            {"bounce", "Bounced email " },
            {"unsub", "Unsubscribed" }

        };

        #endregion

        #region DevelopmentTools
        // NB: This is a development tool that should be commented out before putting on production -- having the ability to delete and re-pull MC activities will help with testing/development
        /*public PXAction<Contact> deleteMailchimpActivities;
        [PXButton(CommitChanges = true)]
        [PXUIField(DisplayName = "Delete MC Activities")]*/
        protected void DeleteMailchimpActivities()
        {
            EPActivityType mCActivityType = GetOrCreateMailchimpActivityType();

            foreach (CRPMTimeActivity acumaticaActivity in Base.Activities.Select().RowCast<CRPMTimeActivity>().Where(ac => ac.Type == mCActivityType.Type))
            {
                Base.Activities.Delete(acumaticaActivity);
            }
        }

        // NB: This is a development tool that should be commented out before putting on production -- having the ability to delete and re-pull MC activities will help with testing/development
        public PXAction<Contact> clearMailchimpData;
        [PXButton(CommitChanges = true)]
        [PXUIField(DisplayName = "Clear MC Data")]
        protected void ClearMailchimpData()
        {
            Contact contact = Base.ContactCurrent.Current;
            if (contact == null) return;

            ContactExt ext = contact.GetExtension<ContactExt>();

            ext.UsrMailchimpListID = null;
            ext.UsrMailchimpListStatus = "";
            ext.UsrMailchimpMemberLastChanged = (DateTime?)null;
            ext.UsrMailchimpAverageClickRate = 0;
            ext.UsrMailchimpAverageOpenRate = 0;
            //ext.UsrMailchimpSubscriberSource = "";
            ext.UsrMailchimpUnsubscribeReason = "";
            ext.UsrMailchimpTimestampOpt = (DateTime?)null;
            ext.UsrMailchimpTimestampSignup = (DateTime?)null;

            Base.ContactCurrent.Update(contact);
            Base.Save.Press();

            DeleteMailchimpActivities();
        }
        #endregion

        #region Event Handlers

        #endregion
    }
}]]></CDATA>
</Graph>