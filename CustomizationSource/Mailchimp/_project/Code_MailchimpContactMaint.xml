<Graph ClassName="MailchimpContactMaint" Source="#CDATA" IsNew="True" FileType="ExistingGraph">
    <CDATA name="Source"><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Runtime.CompilerServices;
using PX.Common;
using PX.Data;
using PX.Objects.AR;
using PX.Objects.CR.MassProcess;
using PX.Objects.GL;
using PX.Objects.CS;
using PX.Objects.EP;
using PX.SM;
using PX.Objects;
using PX.Objects.CR;
using MailchimpPXLib;

namespace Mailchimp
{
  public class ContactMaint_Extension : PXGraphExtension<ContactMaint>
  {

        public PXSelect<CRSetup> Setup;

        public override void Initialize()
        {
            // Sort by StartDate (default is CreatedDateTime) so Mailchimp Activities are in sequence with pre-existing Acumatica Activites
            Base.Activities.OrderByNew<OrderBy<Desc<CRActivity.startDate>>>(); 
        }

        public void getMailchimpStatus(Contact contact)
        {
            Base.ContactCurrent.Current = contact;
            ContactExt ext = contact.GetExtension<ContactExt>();

            var manager = GetManager();
            var member = manager.GetMember(ext.UsrMailchimpListID, contact.EMail);

            SetMailchimpStatus(contact, member.Status.ToString());
        }

        public void SetMailchimpStatus(Contact contact, string status)
        {
            Base.Contact.Current = contact;
            ContactExt ext = contact.GetExtension<ContactExt>();

            ext.UsrMailchimpListStatus = status;
            Base.ContactCurrent.Update(contact);
            Base.Save.Press();
        }

        // Given a Contact maintenance page, return a Mailchimp manager
        public MailchimpPXManager GetManager()
        {
            CRSetup setup = Base.Setup.Current;
            CRSetupExt setupExt = setup.GetExtension<CRSetupExt>();

            var apiKey = setupExt.UsrMailchimpAPIKey;
            return new MailchimpPXManager(apiKey);
        }

        
        public PXAction<Contact> SyncMailchimpStatus;
        [PXProcessButton]
        [PXUIField(DisplayName = "Sync Mailchimp")]
        protected virtual IEnumerable syncMailchimpStatus(PXAdapter adapter)
        {
            foreach (Contact contact in adapter.Get())
            {
                this.Base.Actions.PressSave();

                PXLongOperation.StartOperation(Base, delegate ()
                {
                    ContactMaint graph = PXGraph.CreateInstance<ContactMaint>();
                    ContactMaint_Extension graphExt = graph.GetExtension<ContactMaint_Extension>();
                    graphExt.getMailchimpStatus(contact);
                });

                yield return contact;
            }
        }

        #region Get Mailchimp Activities

        List<MailChimp.Net.Models.Activity> activityList = new List<MailChimp.Net.Models.Activity>();

        public PXAction<PX.Objects.CR.Contact> SyncMailchimpActivities;
        [PXButton(CommitChanges = true)]
        [PXUIField(DisplayName = "Sync MC Activities")]
        protected void syncMailchimpActivities()
        {

            Contact contact = Base.Contact.Current;
            ContactExt ext = contact.GetExtension<ContactExt>();

            CRSetup setup = Base.Setup.Current;
            CRSetupExt setupExt = setup.GetExtension<CRSetupExt>();

            var apiKey = setupExt.UsrMailchimpAPIKey;
            var manager = new MailchimpPXManager(apiKey);

            EPActivityType activityType = getOrCreateMailchimpActivityType();

            // TODO - make sure the contact is on a mailchimp list before trying to get activities

            try
            {
                PXLongOperation.StartOperation(Base, delegate
                {
                    CRMailchimpList list = PXSelect<CRMailchimpList, 
                        Where<CRMailchimpList.listID, Equal<Required<CRMailchimpList.listID>>>>.Select(Base, ext.UsrMailchimpListID);

                    var activities = manager.GetActivities(list.ListID, Base.Contact.Current.EMail);
                    if (activities != null)
                    {
                        CRActivityMaint graph = PXGraph.CreateInstance<CRActivityMaint>();
                        registerActivities(activities.ToList(), activityType, graph, Base);
                    }

                });

            }
            catch (Exception ex)
            {
                string err = ex.InnerException.ToString();
                throw ex;
            }
        }

        private EPActivityType getOrCreateMailchimpActivityType()
        {
            EPActivityType mailChimpActivityType = new EPActivityType();
            CRActivitySetupMaint graph = PXGraph.CreateInstance<CRActivitySetupMaint>();

            EPActivityType existingType = PXSelect<EPActivityType,
                Where<EPActivityType.type, Equal <Required<EPActivityType.type>>>>.Select(Base, MailchimpActivityType.MC);

            if (existingType != null)
            {
                mailChimpActivityType = existingType; // TODO: should we make sure this is active or update any other fields here?
            }
            else
            {
                mailChimpActivityType.Type = MailchimpActivityType.MC;
                mailChimpActivityType.Description = "Mailchimp";
                mailChimpActivityType.Active = true;
                mailChimpActivityType.ImageUrl = "main@Activity";
                mailChimpActivityType.Incoming = true;
                mailChimpActivityType.Outgoing = true;
                mailChimpActivityType.IsInternal = false; // With IsInternal marked as false, will not be an option under the Add Activities menu of the Activities tab

                graph.ActivityTypes.Insert(mailChimpActivityType);
                graph.Actions.PressSave();

            }

            return mailChimpActivityType;
        }

        public bool activityExist(MailChimp.Net.Models.Activity activity, ContactMaint baseGraph)
        {
            // TODO - do we want to change this to just say get everything greater than the latest timestamp? 
            // Maybe more efficient. But there is the potential for someone to delete mailchimp activities after they are pulled into Acumatica, so maybe a full check is good?
            foreach (CRActivity acumaticaActivity in baseGraph.Activities.Select())
            {
                CRActivityExt acumaticaActivityExt = acumaticaActivity.GetExtension<CRActivityExt>(); // TODO - only compare against mailchimp activities

                if (activity.Timestamp == acumaticaActivityExt.UsrMailchimpTimestamp)
                    return true;
            }
            return false;
        }

        public void registerActivities(List<MailChimp.Net.Models.Activity> result, EPActivityType activityType, CRActivityMaint graph, ContactMaint baseGraph)
        {
            bool isInserted = false;

            // Insert activities in order from earliest to latest so that more recent activities are shown at the top of the Activities tab for the contact
            result = result.OrderBy(n => n.Timestamp).ToList();

            foreach (MailChimp.Net.Models.Activity activity in result)
            {
                 //Check if it already exist by UsrMCTimestamp
                if (!activityExist(activity, baseGraph))
                {
                    //Insert Activity to Acumatica
                    CRActivity cRActivity = new CRActivity();
                    CRActivityExt ext = PXCache<CRActivity>.GetExtension<CRActivityExt>(cRActivity);

                    TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
                    DateTime parsedDateTime = DateTime.ParseExact(activity.Timestamp, "yyyy-MM-ddTHH:mm:sszzzz", CultureInfo.InvariantCulture);

                    cRActivity.Type = activityType.Type;
                    cRActivity.Subject = createActivitySubject(activity.Action, activity.Title);  
                    cRActivity.ContactID = baseGraph.Contact.Current.ContactID;
                    cRActivity.BAccountID = baseGraph.Contact.Current.BAccountID;
                    cRActivity.StartDate = parsedDateTime;
                    cRActivity.RefNoteID = baseGraph.Contact.Current.NoteID;

                    ext.UsrMailchimpAction = textInfo.ToTitleCase(activity.Action.ToLower());
                    ext.UsrMailchimpCampaignID = activity.CampaignId;
                    ext.UsrMailchimpTimestamp = activity.Timestamp;
                    //ext.UsrMailchimpClickURL = activity.Url; // TODO - URL is not currently being returned from Mailchimp. To get it, we would need to extend the package

                    cRActivity = graph.Activities.Insert(cRActivity);
                    isInserted = true;

                }
            }
            if (isInserted)
                graph.Actions.PressSave();
        }

        private string createActivitySubject(string action, string title) 
        {
            action = mailChimpActionDict.ContainsKey(action) ? mailChimpActionDict[action] : action;
            string subject = action + title;

            return subject;
        }

        IDictionary<string, string> mailChimpActionDict = new Dictionary<string, string>()
        {
            {"sent", "Was Sent the email " },
            {"open", "Opened the email " },
            {"click", "Clicked on a link from the email " },
            {"bounce", "Bounced email " },
            {"unsub", "Unsubscribed" }

        };

        #endregion

        #region Event Handlers

        #endregion
    }
}]]></CDATA>
</Graph>