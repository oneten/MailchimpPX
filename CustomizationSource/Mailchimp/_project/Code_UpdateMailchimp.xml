<Graph ClassName="UpdateMailchimp" Source="#CDATA" IsNew="True" FileType="NewGraph">
    <CDATA name="Source"><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using PX.Data;
using PX.Objects.CR;
using System.Diagnostics;
using PX.Objects.Common;

namespace Mailchimp
{
  public class UpdateMailchimp : PXGraph<UpdateMailchimp>
  {
        //public PXSave<Contact> Save;
        public PXCancel<ContactMailchimpProcessFilter> Cancel;
        public PXFilter<ContactMailchimpProcessFilter> ProcessFilter;
        public PXProcessing<Contact> Contacts;

        //public PXFilter<DetailsTable> DetailsView;

        public static class UpdateMailchimpActions
        {
            public const string GetAll = "G";
            public const string Status = "S";
            public const string Activity = "A";
            public const string List = "L";
        }

        public static class MCConstants
        {
            public const string SubscribedStatus = "Subscribed";
            public class subscribedStatus : Constant<String>
            {
                public subscribedStatus() : base(SubscribedStatus) { }
            }

        }

        [Serializable]
        public class ContactMailchimpProcessFilter : IBqlTable
        {
            #region MailchimpList
            public abstract class mailchimpList : IBqlField { }
            [PXString(10)]
            [PXSelector(typeof(Search<CRMailchimpList.listID>),
                    SubstituteKey = typeof(CRMailchimpList.listCD))]
            [PXUIField(DisplayName = "Pull from MailChimp List"/*, Enabled=false*/)]
            public virtual string MailchimpList{ get; set; }
            #endregion

            #region ProcessSubscribed
            public abstract class processSubscribed : IBqlField { }
            [PXBool]
            [PXDefault(true, PersistingCheck = PXPersistingCheck.Nothing)]
            [PXUIField(DisplayName = "Process Subscribed Contacts Only")]
            public virtual bool? ProcessSubscribed { get; set; }
            #endregion

            #region Action
            public abstract class action : PX.Data.IBqlField
            {
            }
            protected string _Action;
            [PXString(2)]
            [PXStringList(
                new[] { UpdateMailchimpActions.GetAll, UpdateMailchimpActions.List , UpdateMailchimpActions.Status, UpdateMailchimpActions.Activity},
                new[] { "Get All MailChimp Data", "Get List Membership", "Update Membership Status", "Get Mailchimp Activities" }
            )]
            [PXUnboundDefault(UpdateMailchimpActions.GetAll)]
            public virtual string Action
            {
                get
                {
                    return this._Action;
                }
                set
                {
                    this._Action = value;
                }
            }
            #endregion
        }

        /* [Serializable]
         public class DetailsTable : IBqlTable
         {

         }*/

        public virtual IEnumerable contacts()
        {
            string actionID = ProcessFilter.Current.Action;
            IEnumerable newView;
            switch (actionID)
            {
                // need to limit contacts to: Active, Contact Type = Person, has email address
                case UpdateMailchimpActions.GetAll: // update everything -- membership, status and activities
                    if (ProcessFilter.Current.ProcessSubscribed == true)
                    {
                        newView = PXSelect<Contact, Where<Contact.contactType, Equal<ContactTypesAttribute.person>,
                            And<Contact.eMail, IsNotNull,
                            And<ContactExt.usrMailchimpListID, IsNotNull,
                            And<ContactExt.usrMailchimpListStatus, Equal<MCConstants.subscribedStatus>,
                            And<Contact.isActive, Equal<True>>>>>>>.Select(this);
                    } else
                    {
                        newView = PXSelect<Contact, Where<Contact.contactType, Equal<ContactTypesAttribute.person>,
                            And<Contact.eMail, IsNotNull,
                            And<Contact.isActive, Equal<True>>>>>.Select(this);
                    }
                    break;
                case UpdateMailchimpActions.List: // update membership
                    if (ProcessFilter.Current.ProcessSubscribed == true)
                    {
                        newView = PXSelect<Contact, Where<Contact.contactType, Equal<ContactTypesAttribute.person>,
                            And<Contact.eMail, IsNotNull,
                            And<ContactExt.usrMailchimpListID, IsNotNull,
                            And<ContactExt.usrMailchimpListStatus, Equal<MCConstants.subscribedStatus>,
                            And<Contact.isActive, Equal<True>>>>>>>.Select(this);
                        
                    }
                    else
                    {
                        newView = PXSelect<Contact, Where<Contact.contactType, Equal<ContactTypesAttribute.person>,
                            And<Contact.eMail, IsNotNull,
                            And<Contact.isActive, Equal<True>>>>>.Select(this);
                    }
                    break;
                case UpdateMailchimpActions.Status: // update status and stats
                case UpdateMailchimpActions.Activity: // get activities
                default:
                    // if process subscribed, filter query by mailchimp id not null
                    if (ProcessFilter.Current.ProcessSubscribed == true)
                    {
                        newView = PXSelect<Contact, Where<ContactExt.usrMailchimpListID, IsNotNull,
                            And <Contact.contactType, Equal<ContactTypesAttribute.person>,
                            And < Contact.isActive, Equal<True>,
                            And <ContactExt.usrMailchimpListStatus, Equal<MCConstants.subscribedStatus>>>>>>.Select(this);
                    }
                    else
                    {
                        newView = PXSelect<Contact, Where<ContactExt.usrMailchimpListID, IsNotNull,
                            And <Contact.isActive, Equal<True>,
                            And <Contact.contactType, Equal<ContactTypesAttribute.person>>>>>.Select(this);
                    }
                    break;
                

            }
            return newView;
        }

        public virtual void ContactMailchimpProcessFilter_RowSelected(PXCache sender, PXRowSelectedEventArgs e)
        {
            ContactMailchimpProcessFilter filter = e.Row as ContactMailchimpProcessFilter;
            if (filter != null && !String.IsNullOrEmpty(filter.Action))
            {               
                switch(filter.Action)
                {
                    case UpdateMailchimpActions.GetAll:
                        Contacts.SetProcessDelegate(list => ProcessGetMailchimpData(list));
                        break;
                    case UpdateMailchimpActions.Status:
                        Contacts.SetProcessDelegate( list => ProcessUpdateMailchimpStatuses(list));
                        break;
                    case UpdateMailchimpActions.Activity:
                        Contacts.SetProcessDelegate(list => ProcessSyncMailchimpActivities(list));
                        break;
                    case UpdateMailchimpActions.List:
                        Contacts.SetProcessDelegate(list => ProcessSyncMailchimpLists(list));
                        break;
                    default:
                        throw new PXException(PX.Objects.Common.Messages.IncorrectActionSpecified); // TODO - what should this exception be?
                } 
            }
        }

        public static void ProcessGetMailchimpData(List<Contact> contacts)
        {
            var graph = PXGraph.CreateInstance<ContactMaint>();
            bool errorOccurred = false;
            ContactMaint_Extension graphExt = graph.GetExtension<ContactMaint_Extension>();

            foreach (var contact in contacts)
            {
                graph.Clear(); // make sure to clear any errors etc. from previous contact
                try
                {
                    graphExt.GetMailchimpData(contact);
                    string message = String.Format("Contact {0} has been updated.", contact.DisplayName);
                    PXProcessing.SetInfo(contacts.IndexOf(contact), message);
                }
                catch (PXOuterException outerEx)
                {
                    errorOccurred = true;
                    string errorMsg = "";
                    foreach (string err in outerEx.InnerMessages)
                    {
                        errorMsg += Environment.NewLine + err;
                    }
                    PXProcessing.SetError(contacts.IndexOf(contact), errorMsg);
                }
                catch (Exception ex)
                {
                    PXSetPropertyException exception = ex as PXSetPropertyException;
                    if (exception != null && exception.ErrorLevel == PXErrorLevel.Error)
                    {
                        errorOccurred = true;
                        PXProcessing.SetError(contacts.IndexOf(contact), ex.Message);
                    } else
                    {
                        PXProcessing.SetWarning(contacts.IndexOf(contact), ex.Message);
                    } 
                }
            }
            if (errorOccurred)
                throw new PXException("At least one contact hasn't been processed.");

        }

        public static void ProcessSyncMailchimpLists(List<Contact> contacts)
        {
            var graph = PXGraph.CreateInstance<ContactMaint>();
            bool errorOccurred = false;
            ContactMaint_Extension graphExt = graph.GetExtension<ContactMaint_Extension>();


            foreach (var contact in contacts)
            {
                try
                {
                    graphExt.GetListMembership(contact);

                    string message = String.Format("Contact {0} has been updated.", contact.DisplayName);
                    PXProcessing.SetInfo(contacts.IndexOf(contact), message);
                }
                catch (PXOuterException outerEx)
                {
                    errorOccurred = true;
                    string errorMsg = "";
                    foreach (string err in outerEx.InnerMessages)
                    {
                        errorMsg += Environment.NewLine + err;
                    }
                    PXProcessing.SetError(contacts.IndexOf(contact), errorMsg);
                }
                catch (Exception ex)
                {
                    PXSetPropertyException exception = ex as PXSetPropertyException;
                    if (exception != null && exception.ErrorLevel == PXErrorLevel.Error)
                    {
                        errorOccurred = true;
                        PXProcessing.SetError(contacts.IndexOf(contact), ex.Message);
                    }
                    else
                    {
                        PXProcessing.SetWarning(contacts.IndexOf(contact), ex.Message);
                    }
                }
            }
            if (errorOccurred)
                throw new PXException("At least one contact hasn't been processed.");

        }

        public static void ProcessSyncMailchimpActivities(List<Contact> contacts)
        {
            var graph = PXGraph.CreateInstance<ContactMaint>();
            bool errorOccurred = false;
            ContactMaint_Extension graphExt = graph.GetExtension<ContactMaint_Extension>();


            foreach (var contact in contacts)
            {
                try
                {
                    graphExt.UpdateMailchimpActivities(contact);

                    string message = String.Format("Contact {0} has been updated.", contact.DisplayName);
                    PXProcessing.SetInfo(contacts.IndexOf(contact), message);
                }
                catch (PXOuterException outerEx)
                {
                    errorOccurred = true;
                    string errorMsg = "";
                    foreach (string err in outerEx.InnerMessages)
                    {
                        errorMsg += Environment.NewLine + err;
                    }
                    PXProcessing.SetError(contacts.IndexOf(contact), errorMsg);
                }
                catch (Exception ex)
                {
                    PXSetPropertyException exception = ex as PXSetPropertyException;
                    if (exception != null && exception.ErrorLevel == PXErrorLevel.Error)
                    {
                        errorOccurred = true;
                        PXProcessing.SetError(contacts.IndexOf(contact), ex.Message);
                    }
                    else
                    {
                        PXProcessing.SetWarning(contacts.IndexOf(contact), ex.Message);
                    }
                }
            }
            if (errorOccurred)
                throw new PXException("At least one contact hasn't been processed.");
        }
        
        public static void ProcessUpdateMailchimpStatuses(List<Contact> contacts)
        {
            var graph = PXGraph.CreateInstance<ContactMaint>();
            bool errorOccurred = false;
            ContactMaint_Extension graphExt = graph.GetExtension<ContactMaint_Extension>();


            foreach (var contact in contacts)
            {
                try
                {
                    graphExt.UpdateMailchimpStatus(contact);

                    string message = String.Format("Contact {0} has been updated.", contact.DisplayName);
                    PXProcessing.SetInfo(contacts.IndexOf(contact), message);
                }
                catch (PXOuterException outerEx)
                {
                    errorOccurred = true;
                    string errorMsg = "";
                    foreach (string err in outerEx.InnerMessages)
                    {
                        errorMsg += Environment.NewLine + err;
                    }
                    PXProcessing.SetError(contacts.IndexOf(contact), errorMsg);
                }
                catch (Exception ex)
                {
                    PXSetPropertyException exception = ex as PXSetPropertyException;
                    if (exception != null && exception.ErrorLevel == PXErrorLevel.Error)
                    {
                        errorOccurred = true;
                        PXProcessing.SetError(contacts.IndexOf(contact), ex.Message);
                    }
                    else
                    {
                        PXProcessing.SetWarning(contacts.IndexOf(contact), ex.Message);
                    }
                }
            }
            if (errorOccurred)
                throw new PXException("At least one contact hasn't been processed.");
        }

        public override bool IsDirty
        {
            get
            {
                return false;
            }
        }
    }
}]]></CDATA>
</Graph>