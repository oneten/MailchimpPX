<Graph ClassName="UpdateMailchimp" Source="#CDATA" IsNew="True" FileType="NewGraph">
    <CDATA name="Source"><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using PX.Data;
using PX.Objects.CR;

namespace Mailchimp
{
  public class UpdateMailchimp : PXGraph<UpdateMailchimp>
  {
        //public PXSave<Contact> Save;
        public PXCancel<ContactMailchimpProcessFilter> Cancel;
        public PXFilter<ContactMailchimpProcessFilter> ProcessFilter;
        public PXProcessing<Contact> Contacts;

        //public PXFilter<DetailsTable> DetailsView;

        public static class UpdateMailchimpActions
        {
            public const string Status = "S";
            public const string Activity = "A";
            public const string List = "L";
        }
        [Serializable]
        public class ContactMailchimpProcessFilter : IBqlTable
        {
            #region Action
            public abstract class action : PX.Data.IBqlField
            {
            }
            protected string _Action;
            [PXString(2)]
            [PXStringList(
                new[] { UpdateMailchimpActions.Status, UpdateMailchimpActions.Activity, UpdateMailchimpActions.List },
                new[] { "Update Status", "Update Activity", "Sync Lists" }
            )]
            [PXUnboundDefault(UpdateMailchimpActions.Status)]
            public virtual string Action
            {
                get
                {
                    return this._Action;
                }
                set
                {
                    this._Action = value;
                }
            }
            #endregion
        }

        /* [Serializable]
         public class DetailsTable : IBqlTable
         {

         }*/

        public virtual IEnumerable contacts()
        {
            string actionID = ProcessFilter.Current.Action;
            IEnumerable newView;
            switch (actionID)
            {
                case UpdateMailchimpActions.List:
                    newView = PXSelect<Contact>.Select(this);
                    break;
                case UpdateMailchimpActions.Status:
                case UpdateMailchimpActions.Activity:
                default:
                    newView = PXSelect<Contact, Where<ContactExt.usrMailchimpListID, IsNotNull>>.Select(this);
                    break;
                

            }
            return newView;
        }

        public static void Process(List<Contact> contacts)
        {
            var graph = PXGraph.CreateInstance<ContactMaint>();
            bool errorOccurred = false;
            
            ContactExt ext;
            ContactMaint_Extension graphExt = graph.GetExtension<ContactMaint_Extension>();
            
            var manager = graphExt.GetManager();
            
            foreach (var contact in contacts)
            {
                try
                {
                    ext = contact.GetExtension<ContactExt>();
                    var member = manager.GetMember(ext.UsrMailchimpListID, contact.EMail);

                    graphExt.SetMailchimpStatus(contact, member.Status.ToString());

                    PXProcessing.SetInfo(String.Format(
                        "Contact {0} has been updated.",
                        contact.DisplayName));
                }
                catch (Exception ex)
                {
                    errorOccurred = true;
                    PXProcessing.SetError(contacts.IndexOf(contact), ex.InnerException);
                }
            }
            if (errorOccurred)
                throw new PXException("At least one contact hasn't been processed.");
        }

        public UpdateMailchimp()
        {
            Contacts.SetProcessDelegate(Process);
        }

        public override bool IsDirty
        {
            get
            {
                return false;
            }
        }
    }
}]]></CDATA>
</Graph>